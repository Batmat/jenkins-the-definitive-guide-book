<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-maintaining-jenkins">
	<title>Maintenir Jenkins</title>
	<sect1 id="sect-maint-introduction">
		<title>Introduction</title>
		<para>
			<indexterm class="startofrange" id="ch13-maint"
				significance="normal">
				<primary>maintenance</primary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-maint2"
				significance="normal">
				<primary>Jenkins</primary>
				<secondary>maintenance of</secondary>
			</indexterm>
			Dans ce chapitre, nous allons discuter quelques trucs et astuces que
			vous pourriez trouver utile lors de la maintenance d'une instance
			Jenkins conséquente. Nous regarderons des choses comme limiter et
			surveiller l'espace disque, comment donner assez de mémoire à Jenkins
			et comment archiver les tâches de build ou les migrer d'un serveur à un
			autre. Certains de ces sujets sont abordés ailleurs dans le livre,
			mais ici nous allons regarder à ces éléments du point de vue d'un
			administrateur système.
		</para>
	</sect1>
	<sect1 id="sect-maint-disk-space">
		<title>Surveillance de l'espace disque</title>
		<para>
			L'historique des builds
			<indexterm class="startofrange" id="ch13-monitor1"
				significance="normal">
				<primary>Jenkins</primary>
				<secondary>maintenance of</secondary>
				<tertiary>monitoring disk space</tertiary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-monitor2"
				significance="normal">
				<primary>maintenance</primary>
				<secondary>monitoring disk space</secondary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-monitor3"
				significance="normal">
				<primary>disk space</primary>
				<secondary>monitoring</secondary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-monitor4"
				significance="normal">
				<primary>build history</primary>
				<secondary>disk usage of</secondary>
			</indexterm>
			prend de l'espace disque. De plus, Jenkins analyse les builds
			précédents lorsqu'il charge la configuration d'un projet. Ainsi, le
			chargement d'une tâche avec un millier de builds archivés prendra bien
			plus de temps qu'une tâche n'en n'ayant que 50. Si vous avez un gros
			serveur Jenkins avec des dizaines ou des milliers de tâches, le temps
			total est proportionellement multiplié.
		</para>
		<para>
			La façon la plus simple de plafonner l'utilisation de l'espace disque
			est probablement de limiter le nombre de builds qu'un projet conserve
			dans son historique. Cela se configure en cochant la case "Supprimer
			les anciens builds" en haut de la page de configuration d'un projet
			(voir
			<xref linkend="fig-maintenance-discard-old-builds" />
			). Si vous dites à Jenkins de ne garder que les 20 derniers builds,
			il commencera à effacer les plus vieux builds une fois ce nombre
			atteint. Vous pouvez limiter le nombre d'anciens builds conservés par
			un nombre de builds ou par date (par exemple les builds de moins de
			30 jours). Jenkins fait cela intelligemment: il gardera toujours le
			dernier build réussi au sein de son historique, ainsi vous ne perdrez
			jamais votre dernier build réussi.
		</para>
		<figure float="0" id="fig-maintenance-discard-old-builds">
			<title>Suppression des anciens builds</title>
			<mediaobject id="I_mediaobject13_d1e17727">
				<imageobject role="print">
					<imagedata fileref="figs/print/jtdg_1301.pdf" format="PDF" />
				</imageobject>
				<imageobject role="web">
					<imagedata fileref="figs/web/jtdg_1301.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<para>Le problème avec la suppresion des anciens builds est que vous
			perdez l'historique des builds par la même occasion. Pourtant,
			Jenkins utilise cet historique pour réaliser différents graphiques
			sur les résultats des tests et les métriques du build. Limiter le
			nombre de build conservé à 20, par exemple, implique que Jenkins
			affichera des graphiques contenant seulement 20 points. Cela peut
			être un peu limité. Cette sorte d'information peut être très utile
			aux développeurs. Il est souvent intéressant de pouvoir afficher
			l'évolution des métriques sur l'ensemble de la vie du projet, et pas
			seulement sur les 2 dernières semaines.
		</para>
		<para>
			Heuresement, Jenkins a un mécanisme à même de rendre les développeurs
			et les administraturs systèmes heureux. En général, les éléments
			prenant le plus de place sont les artefacts du build : fichiers JAR,
			WAR et ainsi de suite. L'historique du build en elle même est
			principalement des fichiers de log XML, qui ne prennent pas trop de
			place. Si vous cliquez sur le button "Avancé...", Jenkins vous
			offre
			la possibilité de supprimer les artefacts mais pas les données
			du
			build. Dans
			<xref linkend="fig-maintenance-discard-old-builds-advanced" />
			, par exemple, nous avons configuré Jenkins pour qu'il garde les
			artefacts 7 jours au maximum. Cette option est vraiment pratique si
			vous avez besoin de limiter l'utilisation disque tout en désirant
			fournir l'ensemble des métriques pour les équipes de développement.
		</para>
		<figure float="none" id="fig-maintenance-discard-old-builds-advanced">
			<title>Supprimer les anciens builds—options avancées</title>
			<mediaobject id="I_mediaobject13_d1e17741">
				<imageobject role="print">
					<imagedata fileref="figs/print/jtdg_1302.pdf" format="PDF" />
				</imageobject>
				<imageobject role="web">
					<imagedata fileref="figs/web/jtdg_1302.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<para>N'hésitez pas à être drastique, en gardant un nombre maximal
			d'artefact assez faible. Souvenez vous que Jenkins gardera toujours
			le dernier build stable et le dernier réussi, quelque soit sa
			configuration. Ainsi, vous aurez toujours au moins le dernier build
			réussi (à moins bien sûr qu'il n'y ait pas encore eu de build
			réussi). Jenkins offre également de marquer un build particulier à
			"Conserver ce build sans limite de temps", afin que certains builds
			importants ne puissent être supprimés automatiquement.
		</para>
		<sect2>
			<title>Utiliser le plugin "Disk Usage"</title>
			<para>
				Le plugin Disk Usage
				<indexterm class="startofrange" id="ch13-usage1"
					significance="normal">
					<primary>plugins</primary>
					<secondary>Disk Usage</secondary>
				</indexterm>
				<indexterm class="startofrange" id="ch13-usage2"
					significance="normal">
					<primary>plugin Disk Usage</primary>
				</indexterm>
				est des plus utiles pour un administrateur Jenkins. Ce plugin
				conserve et reporte l'espace disque utilisé par vos projets. Il vous
				permet de repérer et corriger les projets qui utilisent trop
				d'espace.
			</para>
			<para>
				Vous pouvez installer le plugin Disk Usage de la façon habituelle,
				depuis l'écran "Gestion des plugins". Après installation du plugin
				et redémarrage de Jenkins, le plugin Disk Usage enregistre la
				quantité d'espace disque utilisée par chaque projet. Il ajoute
				également un lien "Disk usage" sur la page "Administrer Jenkins". Ce
				lien vous permet d'afficher la quantité totale d'espace utilisé par
				vos projets (voir
				<xref linkend="fig-maintenance-disk-usage" />
				).
			</para>
			<figure float="none" id="fig-maintenance-disk-usage">
				<title>Voir l'utilisation d'espace disque</title>
				<mediaobject id="I_mediaobject13_d1e17769">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1303.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1303.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>La liste est triée par utilisation totale d'espace disque,
				ainsi les projets en utilisant le plus apparaissent en haut. La
				liste fournit deux valeurs par projet. La colonne "Builds" indique
				l'espace disque total utilisé par l'historique des builds, tandis
				que la colonne "Workspace" est l'espace disque utilisé pour
				construire le projet. Pour les projets en cours, l'espace utilisé
				par l'espace de travail tend à être relativement stable, tandis que
				la valeur pour l'historique des builds croit au cours du temps,
				parfois à une vitesse excessivement rapide, à moins que vous ne
				fassiez quelque chose. Vous pouvez garder sous contrôle l'espace
				disque utilisé par l'historique d'un projet en limitant le nombre de
				builds conservés et faisant attention à quels artefacts sont
				conservés.
			</para>
			<para>
				Pour se faire une idée sur la vitesse à laquelle l'espace disque est
				utilisée, vous pouvez aussi afficher l'espace disque utilisé par
				chaque projet au cours du temps. Pour faire cela, vous devez
				configurer le plugin dans sur la page "Configurer le système" (voir
				<xref linkend="fig-maintenance-disk-usage-project" />
				).
			</para>
			<figure float="0" id="fig-maintenance-disk-usage-project">
				<title>Affichage de l'utilisation disque d'un projet</title>
				<mediaobject id="I_mediaobject13_d1e17783">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1304.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1304.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Cela va enregistrer et afficher combien d'espace disque vos projets
				consomment au cours du temps. Le plugin "Disk Usage" affiche un
				graphique de l'utlisation du disque au cours du temps (voir
				<xref linkend="fig-maintenance-project-disk-usage" />
				) qui donne un bon rendu de la vitesse à laquelle votre projet
				consomme l'espace disque, ou au contraire si l'espace utilisé est
				stable au cours
				<indexterm id="I_indexterm13_d1e17792" class="endofrange"
					startref="ch13-usage1" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e17794" class="endofrange"
					startref="ch13-usage2" significance="normal">
					<primary />
				</indexterm>
				du temps.
			</para>
			<figure float="none" id="fig-maintenance-project-disk-usage">
				<title>Affichage de l'espace disque d'un projet au cours du temps
				</title>
				<mediaobject id="I_mediaobject13_d1e17800">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1305.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1305.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
		</sect2>
		<sect2>
			<title>Disk Usage et les projets Jenkins de type Apache Maven</title>
			<para>
				Si vous
				<indexterm class="startofrange" id="ch13-musage"
					significance="normal">
					<primary>Maven build jobs</primary>
					<secondary>disk usage of</secondary>
				</indexterm>
				utilisez les tâches de build Maven, il y a des détails
				supplémentaires que vous devriez connaître. Dans Jenkins, les tâches de build
				 Maven archivent automatiquement, par défaut, les artefacts du
				build. Cela peut être différent de vos attentes.
			</para>
			<para>Le problème est que ces artefacts SNAPSHOT prennent de la
				place, beaucoup même. Sur un projet actif, Jenkins est susceptible
				de réaliser plusieurs builds par heure. Stocker de façon permanente
				chacun des fichiers JAR générés pour chaque build peut être vraiment
				couteux. Le problème s'amplifie si vous avez des projets
				multimodules. En effet, Jenkins archive les artefacts générés pour
				chaque module.
			</para>
			<para>En fait, si vous avez besoin d'archiver vos artefacts Maven
				SNAPSHOT, il est probablement plus avisé de les déployer directement
				dans votre gestionnaire de dépôt local. Nexus Pro, par exemple,
				peut être configuré pour faire cela. Artifactory peut être configuré
				pour supprimer les vieux artefacts SNAPSHOT.
			</para>
			<para>
				Heuresement, vous pouvez configurer Jenkins pour réaliser cela.
				Allez dans la section "Buid" de l'écran de configuration de votre
				tâche et cliquez sur le bouton "Avancé...". Des champs supplémentaires
				sont alors affichés, comme montré là
				<xref linkend="fig-jenkins-maven-no-archives" />
				.
			</para>
			<figure float="none" id="fig-jenkins-maven-no-archives">
				<title>Tâches de build Maven—options avancées</title>
				<mediaobject id="I_mediaobject13_d1e17827">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1306.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1306.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Si vous cochez l'option “Désactive lachivage automatique des artefacts”,TODO
				Jenkins ne stoquera pas les fichiers Jar généré par les builds de
				votre projet. C'est une bonne façon de rendre heureux votre
				administrateur système.
			</para>
			<para>
				Notez que parfois vous avez
				<emphasis>vraiment</emphasis>
				besoin d'archiver les artefacts Maven. Par exemple, cela s'avère
				souvent utiles quand vous implémentez un séquenceur de build 
				(voir
				<xref linkend="sect-build-pipelines" />
				). Dans ce cas, vous pouvez toujours choisir les artefacts
				nécessaires manuellement, et alors utiliser l'option "Supprimer les
				anciens builds" pour définir la durée
				<indexterm id="I_indexterm13_d1e17841" class="endofrange"
					startref="ch13-musage" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e17843" class="endofrange"
					startref="ch13-monitor1" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e17845" class="endofrange"
					startref="ch13-monitor2" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e17847" class="endofrange"
					startref="ch13-monitor3" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e17849" class="endofrange"
					startref="ch13-monitor4" significance="normal">
					<primary />
				</indexterm>
				de conservation.
			</para>
		</sect2>
	</sect1>
	<sect1 id="sect-maint-server-load">
		<title>Surveiller la charge serveur</title>
		<para>
			Jenkins
			<indexterm class="startofrange" id="ch13-server1"
				significance="normal">
				<primary>Jenkins</primary>
				<secondary>maintenance of</secondary>
				<tertiary>monitoring server load</tertiary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-server2"
				significance="normal">
				<primary>maintenance</primary>
				<secondary>monitoring server load</secondary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-server3"
				significance="normal">
				<primary>build server</primary>
				<secondary>monitoring load of</secondary>
			</indexterm>
			inclut une surveillance des activités serveur. Sur l'écran "Administrer Jenkins", 
			cliquez sur l'icône "Statistiques d'utilisation". Cela affiche un
			graphique de la charge serveur au cours du temps pour le noeud maître
			(voir
			<xref linkend="fig-jenkins-load-statistics" />
			). Ce graphique contient trois métriques: nombre total d'exécuteurs,
			nombre d'exécuteurs occupés et longueur de la queue.
		</para>
		<para>
			Le
			<command moreinfo="none">nombre total d'exécuteurs</command>
			(la ligne bleue) inclut les exécuteurs sur les noeuds maître et
			esclaves. Ce chiffre peut varier quand les esclaves sont mis allumés
			ou éteints, et est un indicateur utile pour déterminer si la gestion
			dynamique des esclaves fonctionnent.
		</para>
		<para>
			Le
			<command moreinfo="none">nombre d'exécuteurs occupés</command>
			(la ligne rouge) indique le nombre d'exécuteurs en train de réaliser
			des buids. Vous devriez vous assurer que vous avez assez de capacités
			de réserve afin de supporter les pics de builds. Si tous vos
			exécuteurs sont occupés de façon permanente, vous devriez ajouter
			plus d'exécuteurs et/ou de noeuds esclaves.
		</para>
		<para>
			La
			<command moreinfo="none">longueur de la queue</command>
			(la ligne grise) est le nombre de tâches de build attendant d'être
			exécutés. Les tâches de build sont mis en attente lorsque tous les
			exécuteurs sont occupés. Cette métrique n'inclut pas les tâches en
			attente qu'un build en amont soit fini. Ainsi il donne une idée
			raisonnable du moment où votre serveur pourrait bénéficier de plus de
			capacités.
		</para>
		<figure float="0" id="fig-jenkins-load-statistics">
			<title>Statistiques de charge Jenkins </title>
			<mediaobject id="I_mediaobject13_d1e17895">
				<imageobject role="print">
					<imagedata fileref="figs/print/jtdg_1307.pdf" format="PDF" />
				</imageobject>
				<imageobject role="web">
					<imagedata fileref="figs/web/jtdg_1307.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<para>Vous pouvez obtenir un graphique similaire pour des noeuds
			esclaves, en utilisant le bouton "Statistiques d'utilisation" dans la page de
			détails du noeud esclave.
		</para>
		<para>
			Une autre possibilité est d'installer le plugin de Surveillance. Ce
			plugin utilise JavaMelody afin de réaliser des rapports HTML
			complets sur l'état de votre serveur de build. Les rapports
			incluent la charge système et processeur, les temps moyen de réponse
			et l'utilisation de la mémoire (voir
			<xref linkend="fig-jenkins-monitoring-pluging" />
			). Une fois ce plugin installé, vous pouvez accéder aux graphiques
			JavaMelody depuis la page "Administrer Jenkins", en utilisant les entrés
			du menu
			<indexterm id="I_indexterm13_d1e17906" class="endofrange"
				startref="ch13-server1" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e17908" class="endofrange"
				startref="ch13-server2" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e17910" class="endofrange"
				startref="ch13-server3" significance="normal">
				<primary />
			</indexterm>
			"Monitoring of Hudson/Jenkins master" ou "Hudson/Jenkins nodes".
		</para>
		<figure float="0" id="fig-jenkins-monitoring-pluging">
			<title>The Jenkins Monitoring plugin</title>
			<mediaobject id="I_mediaobject13_d1e17916">
				<imageobject role="print">
					<imagedata fileref="figs/print/jtdg_1308.pdf" format="PDF" />
				</imageobject>
				<imageobject role="web">
					<imagedata fileref="figs/web/jtdg_1308.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
	</sect1>
	<sect1 id="sect-maint-backups">
		<title>Sauvegarde de votre configuration</title>
		<para>
			Sauvegarder
			<indexterm class="startofrange" id="ch13-backups"
				significance="normal">
				<primary>backups</primary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-backups2"
				significance="normal">
				<primary>maintenance</primary>
				<secondary>backups</secondary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-backups3"
				significance="normal">
				<primary>Jenkins</primary>
				<secondary>maintenance of</secondary>
				<tertiary>backups</tertiary>
			</indexterm>
			vos données est pratique universellement recommandée, et vos serveurs
			Jenkins ne devraient pas faire exception. Par chance, sauvergarder
			Jenkins est relativement aisé. Dans cette section nous allons
			regarder plusieurs façons de réaliser cela.
		</para>
		<sect2>
			<title>Fondamentaux de la sauvegarde Jenkins</title>
			<para>
				Dans la plus simple des configurations, il suffit de sauvegarder
				périodiquement votre dossier
				<filename moreinfo="none">JENKINS_HOME</filename>
				.
				Il contient la configuration de toutes vos tâches de build, les
				configurations de vos noeuds esclaves et l'historique des build. La
				sauvegarde peut se faire pendant que Jenkins tourne. Il n'y a pas
				besoin de couper votre serveur pendant la sauvegarde.
			</para>
			<para>
				L'inconvénient de cette approche est que dossier
				<filename moreinfo="none">JENKINS_HOME</filename>
				peut contenir un volume très important de données (voir
				<xref linkend="sec-hudson-home-directory-contents" />
				). Si cela devient un problème, vous pouvez gagner un peu en ne
				sauvegardant pas les dossiers suivants, qui contiennent des données
				aisément recrées à la demande par Jenkins :
			</para>
			<variablelist>
				<varlistentry>
					<term>
						<filename moreinfo="none">$JENKINS_HOME/war</filename>
					</term>
					<listitem>
						<para>Le fichier WAR eclaté</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<filename moreinfo="none">$JENKINS_HOME/cache</filename>
					</term>
					<listitem>
						<para>Outils téléchargés</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<filename moreinfo="none">$JENKINS_HOME/tools</filename>
					</term>
					<listitem>
						<para>Outils décompressés</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				Vous pouvez aussi être sélectif concernant ce que vous sauvegarder
				dans vos tâches de build.
				Le dossier
				<filename moreinfo="none">$JENKINS_HOME/jobs</filename>
				contient la configuration de la tâche, l'historique des builds et les
				fichiers archivés pour chacun de vos builds. La structure d'un
				dossier de tâche de build est présentée dans
				<xref linkend="fig-jenkins-build-directory" />
				.
			</para>
			<figure float="none" id="fig-jenkins-build-directory">
				<title>Le dossier des builds</title>
				<mediaobject id="I_mediaobject13_d1e17989">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1309.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1309.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Pour savoir comment optimiser vos backups Jenkins, vous devez
				comprendre comment sont organisés les dossiers de tâche de build. Au sein
				du dossier
				<emphasis>jobs</emphasis>
				, il y a un dossier pour chaque tâche de build. Ce dossier contient deux
				dossiers :
				<filename moreinfo="none">builds</filename>
				et
				<filename moreinfo="none">workspace</filename>
				. Il n'y a pas besoin de sauvegarder le dossier
				<filename moreinfo="none">workspace</filename>
				, vu qu'il sera simplement restauré via une simple récupération
				si Jenkins constate son absence.
			</para>
			<para>
				Au contraire, le dossier
				<filename moreinfo="none">builds</filename>
				requiert plus d'attention. Il contient l'historique de vos résultats
				de builds et de vos artefacts générés précédement, avec un dossier
				horodaté pour chaque build précédent.
				Si vous n'êtres pas intéressés par la restauration de votre historique
				des builds ou d'anciens artefacts, vous n'avez pas besoin de sauver
				ce dossier.
				Si vous intéressés, continuez à lire! Dans chacun de ces dossiers,
				vous trouverez l'historique des builds (stockés sous la forme de
				fichiers XML, par exemple les résultats des tests JUnit)
				et les artefacts archivés. Jenkins utilise les fichiers textes et XML
				pour réaliser les graphiques affichés sur le tableau de bord des tâche de build. 
				Le dossier
				<filename moreinfo="none">archive</filename>
				contient les fichiers binaires ayant été générés et stockés par les
				builds précédents. Les binaires peuvent vous être importants ou non,
				mais ils peuvent prendre beaucoup de place. Aussi, si vous les
				excluez de vos sauvegardes, vous pourriez économiser beaucoup
				d'espace.
			</para>
			<para>
				De même qu'il est sage de réaliser des sauvegardes fréquentes, il
				est également sage de tester votre procédure de sauvegarde. Avec
				Jenkins, cela est facile à faire.
				Les répertoires racine Jenkins sont totalement portables, pour tester
				votre sauvegarde, il suffit donc de l'extraire dans un dossier
				temporaire et de lancer une instance d'y
				lancer Jenkins. Par exemple, imaginons que vous avez extrait votre
				sauvegarde dans un dossier temporaire nommé
				<filename moreinfo="none">/tmp/jenkins-backup</filename>
				. Pour tester cette sauvegarde, assigner le chemin du dossier
				temporaire à la variable
				<filename moreinfo="none">JENKINS_HOME</filename>
				:
			</para>
			<programlisting id="I_programlisting13_d1e18024"
				format="linespecific">
				$
				<userinput moreinfo="none">export
					JENKINS_HOME=/tmp/jenkins-backup</userinput>
			</programlisting>
			<para>Puis démarrer Jenkins sur un port différent et regardez s'il
				fonctionne :
			</para>
			<programlisting id="I_programlisting13_d1e18031"
				format="linespecific">
				$
				<userinput moreinfo="none">java -jar jenkins.war --httpPort=8888</userinput>
			</programlisting>
			<para>Vous pouvez maintenant voir Jenkins tourner sur ce port et
				vérifier que votre sauvegarde fonctionne correctement.</para>
		</sect2>
		<sect2>
			<title>Utilisation du Backup Plugin</title>
			<para>
				L'approche via le
				<indexterm id="I_indexterm13_d1e18042" significance="normal">
					<primary>Backup plugin</primary>
				</indexterm>
				<indexterm id="I_indexterm13_d1e18045" significance="normal">
					<primary>plugins</primary>
					<secondary>Backup</secondary>
				</indexterm>
				décrite dans la section précédente est suffisament simple pour
				s'intégrer dans vos procédures normales de sauvegardes, mais vous
				pourriez préférer quelque chose de plus spécifique à Jenkins. Le
				plugin Jenkins Backup Manager (voir
				<xref linkend="fig-jenkins-backup-manager" />
				) fournit une interface utilisateur simple utilisable pour
				sauvegarder et restaurer vos configurations et données Jenkins.
			</para>
			<figure float="none" id="fig-jenkins-backup-manager">
				<title>Plugin Jenkins Backup Manager</title>
				<mediaobject id="I_mediaobject13_d1e18056">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1310.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1310.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Ce plugin permet de configurer et lancer des sauvegardes tant des
				configurations de vos tâches de build que de votre historique des
				builds. L'écran "Configuration", dans l'écran "Administrer Jenkins" 
				via "Gestionnaire de backup", vous donne un important contrôle sur les
				éléments à sauvegarder (voir
				<xref linkend="fig-jenkins-backup-config" />
				). Vous pouvez choisir de seulement sauvegarder les fichiers XML de
				configuration, ou de sauvegarder avec l'historique des builds.
				Vous pouvez aussi choisir de sauvegarder (ou non) les artefacts Maven
				automatiquement générés (dans de nombreux processus de build, ces
				artefacts sont disponibles dans votre Entreprise Repository Manager
				local). Vous pouvez aussi sauvegarder les espaces de travail des
				tâches  (généralement non nécessaire, comme discuté plus haut) et toutes
				empreintes numériques générées.
			</para>
			<figure float="none" id="fig-jenkins-backup-config">
				<title>Configurer Jenkins Backup Manager</title>
				<mediaobject id="I_mediaobject13_d1e18068">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1311.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1311.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Vous pouvez déclencher une sauvegarde manuellement, depuis l'écran
				"Gestionnaire de backup" (accessible depuis l'écran "Administrer Jenkins").
				La sauvegarde prend du temps et stoppe Jenkins durant cette période (à moins
				de désactiver cette option dans la
				<phrase role="keep-together">configuration</phrase>
				du backup ).
			</para>
			<para>
				A l'heure où ces lignes sont écrites, il n'est pas possible de
				planifier cette opération depuis Jenkins, mais vous pouvez démarrer
				la sauvegarde en invoquant l'adresse correspondante (par exemple
				<ulink url="http://localhost:8080/backup/backup" />
				si votre instance Jenkins tourne localment sur le port 8080). Dans
				un environnement unix, par exemple, cela serait généralement fait
				via une tâche cron en utilisant un outil tel que
				<literal moreinfo="none">wget</literal>
				ou
				<literal moreinfo="none">curl</literal>
				pour démarrer la sauvegarde.
			</para>
		</sect2>
		<sect2>
			<title>Des sauvegardes automatisées plus légères</title>
			<para>
				Si tout
				<indexterm id="I_indexterm13_d1e18093" significance="normal">
					<primary>Thin Backup plugin</primary>
				</indexterm>
				<indexterm id="I_indexterm13_d1e18096" significance="normal">
					<primary>plugins</primary>
					<secondary>Thin Backup</secondary>
				</indexterm>
				<indexterm id="I_indexterm13_d1e18101" significance="normal">
					<primary>lightweight backups</primary>
				</indexterm>
				ce que vous voulez sauvegarder est votre configuration des tâches de build,
				le plugin Backup Manager peut être considéré excessif. Une
				autre option est d'utiliser le plugin "Thin Backup", qui permet de
				planifier des sauvegardes complètes et incrémentales de vos fichiers
				de configuration.
				Vu qu'ils ne sauvegardent pas votre historique des
				builds ou vos artefacts, ces sauvegardes sont très rapides et peuvent
				ainsi être réalisées sans stopper le serveur pour les réaliser.
			</para>
			<para>
				Tout comme le plugin Backup, ce plugin ajoute une icône dans la page
				"Administrer Jenkins". De là, vous pouvez configurer et planifier
				les sauvegardes de votre configuration, déclencher un backup
				immédiat ou restaurer une sauvegarde précédente. La configuration
				est sans détours (voir
				<xref linkend="fig-lightweight-backup-config" />
				). Elle implique simplement de configurer des sauvegardes complètes
				et incrémentales en utilisant une syntaxe similaire à celle de cron
				et de fournir un dossier où stocker les sauvegardes.
			</para>
			<figure float="none" id="fig-lightweight-backup-config">
				<title>Configurer le plugin Thin Backup</title>
				<mediaobject id="I_mediaobject13_d1e18112">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1312.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1312.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Pour restaurer une configuration précédente, aller simplement à la
				page "Restore" et choisissez la date de la configuration que vous
				voulez réappliquer (voir
				<xref linkend="fig-restore-light-plugin" />
				). Une fois la configuration précédente restaurée, vous devez
				recharger la configuration Jenkins depuis le disque
				<indexterm id="I_indexterm13_d1e18121" class="endofrange"
					startref="ch13-backups" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e18123" class="endofrange"
					startref="ch13-backups2" significance="normal">
					<primary />
				</indexterm>
				<indexterm id="I_indexterm13_d1e18125" class="endofrange"
					startref="ch13-backups3" significance="normal">
					<primary />
				</indexterm>
				ou redémarrer Jenkins.
			</para>
			<figure float="none" id="fig-restore-light-plugin">
				<title>Restaurer une configiuratiopn précédente</title>
				<mediaobject id="I_mediaobject13_d1e18131">
					<imageobject role="print">
						<imagedata fileref="figs/print/jtdg_1313.pdf" format="PDF" />
					</imageobject>
					<imageobject role="web">
						<imagedata fileref="figs/web/jtdg_1313.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</figure>
		</sect2>
	</sect1>
	<sect1 id="sect-maint-archiving-jobs">
		<title>Archiver les Tâches de Build</title>
		<para>
			Une autre façon
			<indexterm class="startofrange" id="ch13-arc1"
				significance="normal">
				<primary>maintenance</primary>
				<secondary>archiving build jobs</secondary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-arc2"
				significance="normal">
				<primary>Jenkins</primary>
				<secondary>maintenance of</secondary>
				<tertiary>archiving build jobs</tertiary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-arc3"
				significance="normal">
				<primary>archiving build jobs</primary>
			</indexterm>
			<indexterm class="startofrange" id="ch13-arc4"
				significance="normal">
				<primary>build jobs</primary>
				<secondary>archiving</secondary>
			</indexterm>
			d'aborder la problématique de l'espace disque est de supprimer ou
			d'archiver les projets qui ne sont plus actifs. Archiver un projet
			vous permet de le restaurer aisément ultérieurement afin de consulter
			ses données ou artefacts. Archiver un projet est facile : il suffit
			de déplacer le répertoire de celui ci en dehors du répertoire des
			tâches. Bien sûr, généralement, le répertoire de la tâche est en premier
			lieu compressé dans un fichier ZIP ou une tarball.
		</para>
		<para>
			Dans l'exemple qui suit, nous voulons archiver le project
			<emphasis>tweeter-default</emphasis>
			. En premier lieu, nous nous rendons dans le répertoire
			<filename moreinfo="none">jobs</filename>
			de Jenkins et y créons une "tarball" (archive compressée) du
			répertoire
			<filename moreinfo="none">tweeter-default</filename>
			se trouvant dans le répertoire des tâches.
		</para>
		<screen format="linespecific">
			$
			<userinput moreinfo="none">cd $JENKINS_HOME/jobs</userinput>
			$
			<userinput moreinfo="none">ls</userinput>
			gameoflife-default tweeter-default
			$
			<userinput moreinfo="none">tar czf tweeter-default.tgz
				tweeter-default</userinput>
			$
			<userinput moreinfo="none">ls</userinput>
			gameoflife-default tweeter-default tweeter-default.tgz
		</screen>
		<para>Si le projet n'est pas en cours de construction par Jenkins,
			vous pouvez alors le supprimer en toute sécurité et déplacer
			l'archive vers son lieu de stockage :
			</para>
		<screen format="linespecific">
			$
			<userinput moreinfo="none">rm -Rf tweeter-default</userinput>
			$
			<userinput moreinfo="none">mv tweeter-default.tgz
				/data/archives/jenkins</userinput>
		</screen>
		<para>
			Une fois cela réalisé, vous pouvez tout simplement recharger la
			configuration depuis le disque dans l'écran "Administrer Jenkins"
			(voir
			<xref linkend="fig-maintenance-reload-configuration" />
			). Le projet archivé va dispairaitre instantanément de votre tableau
			de bord.
		</para>
		<figure float="none" id="fig-maintenance-reload-configuration">
			<title>Recharger la configuration à partir du disque</title>
			<mediaobject id="I_mediaobject13_d1e18203">
				<imageobject role="print">
					<imagedata fileref="figs/print/jtdg_1314.pdf" format="PDF" />
				</imageobject>
				<imageobject role="web">
					<imagedata fileref="figs/web/jtdg_1314.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<para>
			Sur une machine Windows, vous pouvez faire exactement de même en
			créant un fichier ZIP du
			<indexterm id="I_indexterm13_d1e18210" class="endofrange"
				startref="ch13-arc1" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e18212" class="endofrange"
				startref="ch13-arc2" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e18214" class="endofrange"
				startref="ch13-arc3" significance="normal">
				<primary />
			</indexterm>
			<indexterm id="I_indexterm13_d1e18216" class="endofrange"
				startref="ch13-arc4" significance="normal">
				<primary />
			</indexterm>
			répertoire du projet.
		</para>
	</sect1>
  <sect1 id="sect-maint-migrating-jobs">
    <title>Migrating Build Jobs</title>
    <para>There <indexterm class="startofrange" id="ch13-migrate1" significance="normal"><primary>Jenkins</primary><secondary>maintenance of</secondary><tertiary>migrating build jobs</tertiary></indexterm><indexterm class="startofrange" id="ch13-migrate2" significance="normal"><primary>maintenance</primary><secondary>migrating build jobs</secondary></indexterm><indexterm class="startofrange" id="ch13-migrate3" significance="normal"><primary>migrating build jobs</primary></indexterm><indexterm class="startofrange" id="ch13-migrate4" significance="normal"><primary>build jobs</primary><secondary>migrating</secondary></indexterm>are times when you need to move or copy Jenkins build jobs
    from one Jenkins instance to another, without copying the entire Jenkins
    configuration. For example, you might be migrating your build jobs to a
    Jenkins instance on a brand new box, with system configuration details
    that vary from the original machine. Or you might be restoring an old
    build job that you have archived.</para>
    <para>As we have seen, Jenkins stores all of the data it needs for a
    project in a subdirectory of the <filename moreinfo="none">jobs</filename>
    directory in your Jenkins home directory. This subdirectory is easy to
    <phrase role="keep-together">identify—</phrase>it has the same name as
    your project. Incidentally, this is one reason why your project names
    really shouldn’t contain spaces, particularly if Jenkins is running under
    Unix or Linux—it makes maintenance and admin tasks a lot easier if the
    project names are also well-behaved Unix filenames.</para>
    <para>You can copy or move build jobs between instances of projects simply
    enough by copying or moving the build job directories to the new Jenkins
    instance. The project job directory is self-contained—it contains both the
    full project configuration and all the build history. It is even safe
    enough to copy build job directories to a running Jenkins instance, though
    if you are also deleting them from the original server, you should shut
    this one down first. You don’t even need to restart the new Jenkins
    instance to see the results of your import—just go to the Manage Jenkins
    screen and click on Reload Configuration From Disk. This will load the new
    jobs and make them immediately visible on the Jenkins dashboard.</para>
    <para>There are a few gotchas, however. If you are migrating your jobs to
    a brand new Jenkins configuration, remember to install, or migrate, the
    plugins from your original server. The plugins can be found in the
    <filename moreinfo="none">plugins</filename> directory, so you can simply
    copy everything from this directory to the corresponding directory in your
    new instance.</para>
    <para>Of course, you might be migrating the build jobs to a new instance
    precisely <emphasis>because</emphasis> the plugin configuration on the
    original box is a mess. Some Jenkins plugins can be a bit buggy sometimes,
    and you may want to move to a clean installation with a well-known,
    well-defined set of vetted plugins. In this case, you may need to rework
    some of your project configurations once they have been imported.</para>
    <para>The reason for this is straightforward. When you use a plugin in a
    project, the project’s <filename moreinfo="none">config.xml</filename>
    will be updated with plugin-specific configuration fields. If for some
    reason you need to migrate projects selectively to a Jenkins installation
    <emphasis>without</emphasis> these plugins installed, Jenkins will no
    longer understand these parts of the project configuration. The same thing
    can also sometimes happen if the plugin versions are very different on the
    machines, and the data format used by the plugin has changed.</para>
    <para>If you are migrating jobs to a Jenkins instance with a different
    configuration, it also pays to keep an eye on the system logs. Invalid
    plugin configurations will usually let you know through warnings or
    exceptions. While not always fatal, these error messages often mean that
    the plugin will not work as expected, or at all.</para>
    <para>Jenkins provides some useful features to help you migrate your
    project configurations. If Jenkins finds data that it thinks is out of
    date or invalid, it will tell you so. On the Manage Jenkins screen, you
    will get a message like the one in <xref linkend="fig-jenkins-new-version"/>.</para>
    <figure float="0" id="fig-jenkins-new-version">
      <title>Jenkins will inform you if your data is not compatible with the
      current version</title>
      <mediaobject id="I_mediaobject13_d1e18282">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_1315.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_1315.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>From here, you can choose to either leave the configuration as it is
    (just in case you roll back to a previous version of your Jenkins
    instance, for example), or let Jenkins discard the fields it cannot read.
    If you choose this option, Jenkins will bring up a screen containing more
    details about the error, and can even help tidy up your project
    configuration files if you wish (see <xref linkend="fig-jenkins-manage-old-data"/>).</para>
    <figure float="0" id="fig-jenkins-manage-old-data">
      <title>Managing out-of-date build jobs data</title>
      <mediaobject id="I_mediaobject13_d1e18295">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_1316.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_1316.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>This screen gives you more details about the project containing the
    dodgy data, as well as the exact error message. This gives you several
    options. If you are sure that you no longer need the plugin that
    originally created the data, you can safely remove the redundant fields by
    clicking on the Discard Unreadable Data button. Alternatively, you may
    decide that the fields belong to a useful plugin that hasn’t yet been
    installed on the new Jenkins instance. In this case, install the plugin
    and all should be well. Finally, you can always choose to leave the
    redundant data and live with the error message, at least until you are
    sure that you won’t need to migrate the job back to the old server some
    day.</para>
    <para>However, Jenkins doesn’t always detect all of the errors or
    inconsistencies—it still pays to keep one eye on the system logs when you
    migrate your build jobs. For example, the following is a real example from
    a Jenkins log file showing what can happen during the migration
    process:</para>
    <screen format="linespecific">Mar 16, 2010 2:05:06 PM hudson.util.CopyOnWriteList$ConverterImpl unmarshal
WARNING: Failed to resolve class
com.thoughtworks.xstream.mapper.CannotResolveClassException: hudson.plugins.ciga
me.GamePublisher : hudson.plugins.cigame.GamePublisher
        at com.thoughtworks.xstream.mapper.DefaultMapper.realClass(DefaultMapper
.java:68)
        at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper
.java:38)
        at com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass(DynamicP
roxyMapper.java:71)
        at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper
.java:38)</screen>
    <para>The error is essentially telling us that it can’t find a class
    called <literal moreinfo="none">hudson.plugins.cigame.GamePublisher</literal>. In fact,
    the target installation is missing the CI Game plugin. And in this case
    (as sometimes happens), no warning messages where appearing on the Manage
    Jenkins page, so Jenkins was unable to correct the configuration files
    itself.</para>
    <para>The simplest solution in this case would be to install the CI Game
    plugin on the target server. But what if we don’t want to install this
    plugin? We could leave the configuration files alone, but this might mask
    more significant errors later on—it would be better to tidy them
    up.</para>
    <para>In that case, we need to inspect and update the project
    configuration files by hand. On this Unix box, I just used
    <literal moreinfo="none">grep</literal> to find all the configuration files containing a
    reference to “cigame”:</para>
    <screen format="linespecific">$ <userinput moreinfo="none">cd $JENKINS_HOME/jobs</userinput>
$ <userinput moreinfo="none">grep cigame */config.xml</userinput>
project-a/config.xml:    &lt;hudson.plugins.cigame.GamePublisher/&gt;
project-b/config.xml:    &lt;hudson.plugins.cigame.GamePublisher/&gt;
project-c/config.xml:    &lt;hudson.plugins.cigame.GamePublisher/&gt;</screen>
    <para>In these <emphasis>config.xml</emphasis> files, I found the
    reference to the CI Game plugin in the <literal moreinfo="none">&lt;publishers&gt;</literal> sect1 (which is where the
    configuration for the reporting plugins generally goes):</para>
    <programlisting id="I_programlisting13_d1e18334" format="linespecific">&lt;maven2-moduleset&gt;
  ...
  &lt;publishers&gt;
    &lt;hudson.plugins.cigame.GamePublisher/&gt;
    &lt;hudson.plugins.claim.ClaimPublisher/&gt;
  &lt;/publishers&gt;
  ...
&lt;/maven2-moduleset&gt;</programlisting>
    <para>To fix the issue, all I have to do is to remove the offending
    line:</para>
    <programlisting id="I_programlisting13_d1e18339" format="linespecific">&lt;maven2-moduleset&gt;
  ...
  &lt;publishers&gt;
    &lt;hudson.plugins.claim.ClaimPublisher/&gt;
  &lt;/publishers&gt;
  
  ...
&lt;/maven2-moduleset&gt;</programlisting>
    <para>The exact location of the plugin configuration data will vary
    depending on the plugin, but in general the <filename moreinfo="none">config.xml</filename> files are quite readable, and
    updating them by hand isn’t too hard.</para>
    <para>So, all in all, migrating build jobs between Jenkins instances isn’t
    all that hard—you just need to know a couple of tricks for the corner
    cases, and if you know where to look Jenkins provides some nice tools to
    make<indexterm id="I_indexterm13_d1e18348" class="endofrange" startref="ch13-migrate1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18350" class="endofrange" startref="ch13-migrate2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18352" class="endofrange" startref="ch13-migrate3" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18354" class="endofrange" startref="ch13-migrate4" significance="normal"><primary/></indexterm> the process<indexterm id="I_indexterm13_d1e18357" class="endofrange" startref="ch13-maint2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18359" class="endofrange" startref="ch13-maint" significance="normal"><primary/></indexterm> smoother.</para>
  </sect1>
  <sect1 id="sect-maint-conclusion">
    <title>Conclusion</title>
    <para>In this chapter, we looked at a number of considerations that you
    should be aware of if your job is to maintain your Jenkins server,
    including how to monitor disk and server usage, how to back up your build
    jobs and Jenkins configuration files, and also how to migrate build jobs
    and upgrade build data safely.</para>
  </sect1>
</chapter>
